import logging
from aiogram import Bot
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner

logger = logging.getLogger(__name__)

async def is_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞."""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        is_admin_status = isinstance(member, (ChatMemberAdministrator, ChatMemberOwner))
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id} - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin_status}")
        return is_admin_status
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

async def get_available_reactions(bot: Bot, chat_id: int, cache: dict) -> list[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —á–∞—Ç–∞."""
    if chat_id in cache:
        logger.debug(f"–†–µ–∞–∫—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞: {cache[chat_id]}")
        return cache[chat_id]

    try:
        chat = await bot.get_chat(chat_id)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {chat_id}: {chat}")
        if hasattr(chat, "available_reactions") and chat.available_reactions:
            reactions = []
            logger.debug(f"available_reactions: type={chat.available_reactions.type}, value={chat.available_reactions}")
            if chat.available_reactions.type == "all":
                reactions = [
                    "üëç", "üëé", "‚ù§Ô∏è", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò¢",
                    "üéâ", "ü§©", "üôà", "üòá", "üòÇ", "ü§ì", "üò°", "ü§ó", "ü´°", "üí©"
                ]
                logger.debug(f"–ß–∞—Ç {chat_id} –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏: {reactions}")
            elif chat.available_reactions.type == "some":
                reactions = [r.emoji for r in chat.available_reactions.reactions if r.type == "emoji"]
                logger.debug(f"–ß–∞—Ç {chat_id} –∏–º–µ–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏: {reactions}")
            cache[chat_id] = reactions
            return reactions
        else:
            logger.debug(f"–†–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            cache[chat_id] = []
            return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return []

def translate_button(key: str, value: int, lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞."""
    translations = {
        "ru": {
            "intel": f"–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {value}",
            "freq": f"–ß–∞—Å—Ç–æ—Ç–∞: {value}%",
            "custom": "–ö–∞—Å—Ç–æ–º"
        },
        "uk": {
            "intel": f"–Ü–Ω—Ç–µ–ª–µ–∫—Ç: {value}",
            "freq": f"–ß–∞—Å—Ç–æ—Ç–∞: {value}%",
            "custom": "–ö–∞—Å—Ç–æ–º–Ω–∏–π"
        },
        "en": {
            "intel": f"Intelligence: {value}",
            "freq": f"Frequency: {value}%",
            "custom": "Custom"
        }
    }
    return translations.get(lang, translations["en"])[key]